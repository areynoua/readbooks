<?php
/**
* Plugin Name: Custom Book Summary
* Plugin URI: https://vub.ac.be
* Description: Plugin to add book summary
* Version: 1.0
* Author: R. Detobel, A. Reynouard
**/

$GOOGLE_KEY = 'AIzaSyCclMD62R4J9hv6SSzPznRjpP6MNWtG6Sg';


function register_cpt_book_summary() {
 
    $labels = array(
        'name' => _x('Book Summary', 'book_summary'),
        'singular_name' => _x('Book Summary', 'book_summary'),
        'add_new' => _x('Add New', 'book_summary'),
        'add_new_item' => _x('Add New Book Summary', 'book_summary'),
        'edit_item' => _x('Edit Book Summary', 'book_summary'),
        'new_item' => _x('New Book Summary', 'book_summary'),
        'view_item' => _x('View Book Summary', 'book_summary'),
        'search_items' => _x( 'Search Book Summary', 'book_summary'),
        'not_found' => _x('No book summary found', 'book_summary'),
        'not_found_in_trash' => _x('No book summary found in Trash', 'book_summary'),
        'parent_item_colon' => _x('Parent Book Summary:', 'book_summary'),
        'menu_name' => _x('Book Summary', 'book_summary'),
    );
 
    $args = array(
        'labels' => $labels,
        'hierarchical' => true,
        'description' => 'Book review filterable by type of publication',
        'supports' => array('title', 'editor', 'author', 'thumbnail', 'trackbacks', 'custom-fields', 'comments', 'revisions', 'page-attributes' ),
        'taxonomies' => array('PublicationTypes', 'Theme'),
        'public' => true,
        'show_ui' => true,
        'show_in_menu' => true,
        'menu_position' => 5,
        'menu_icon' => 'dashicons-book-alt',
        'show_in_nav_menus' => true,
        'publicly_queryable' => true,
        'exclude_from_search' => false,
        'has_archive' => true,
        'query_var' => true,
        'can_export' => true,
        'rewrite' => true,
        'capability_type' => 'post'
    );
 
    register_post_type('book_summary', $args );
}
 
add_action( 'init', 'register_cpt_book_summary' );


function publication_type_taxonomy() {
    register_taxonomy(
        'PublicationTypes',
        'book_summary',
        array(
            'hierarchical' => false,
            'label' => 'Type',
            'query_var' => true,
            'rewrite' => array(
                'slug' => 'type',
                'with_front' => false
            )
        )
    );
}

function theme_taxonomy() {
    register_taxonomy(
        'Theme',
        'book_summary',
        array(
            'hierarchical' => false,
            'label' => 'Theme',
            'query_var' => true,
            'rewrite' => array(
                'slug' => 'theme',
                'with_front' => false
            )
        )
    );
}


add_action('init', 'publication_type_taxonomy');
add_action('init', 'theme_taxonomy');


function wpc_cpt_in_home($query) {
    if (! is_admin() && $query->is_main_query()) {
        if ($query->is_home) {
            $query->set('post_type', array('book_summary'));
        }
    }
}
add_action('pre_get_posts','wpc_cpt_in_home');

function wpc_cpt_in_search($query) {
    if (! is_admin() && $query->is_main_query()) {
        if ($query->is_search) {
            $query->set('post_type', array('post', 'book_summary'));
        }
    }
}
add_action('pre_get_posts','wpc_cpt_in_search');

function submit_summary_callback($form_data) {
    global $GOOGLE_KEY;
    $form_fields   =  $form_data['fields'];

    /*
    text_title
    book_author
    text_summary
    text_type
    text_theme
    text_link
    */

    foreach($form_fields as $field){
        $field_id    = $field['id'];
        $field_key   = $field['key'];
        $field_value = $field['value'];

        switch ($field['key']) {
            case 'text_summary':
                $text_summary = $field['value'];
                break;

            case 'text_title':
                $text_title = $field['value'];
                break;

            case 'text_author':
                $text_author = $field['value'];
                break;

            case 'text_link':
                $text_link = $field['value'];
                break;

            case 'text_type':
                $text_type = $field['value'];
                break;

            case 'text_theme':
                $text_themes = $field['value'];
                break;

        }
    }


    $postarr = array(
            'post_content' => $text_summary,
            'post_title' => $text_title,
            'post_type' => 'book_summary',
            'tax_input' => array(
                    'PublicationTypes' => $text_type,
                    'Theme' => implode(", ", $text_themes)
                )
        );

    $insertElement = wp_insert_post($postarr);
    update_post_meta($insertElement, 'text_author', $text_author);
    if(isset($text_link)) {
        update_post_meta($insertElement, 'text_link', $text_link);
    }

    // Doc: https://developers.google.com/books/docs/v1/using#ids

    $googleUrl = 'https://www.googleapis.com/books/v1/volumes?q=intitle:' . urlencode($text_title) . 
                            '+inauthor:' . urlencode($text_author) . 
                            '&key=' . $GOOGLE_KEY;
    $json = file_get_contents($googleUrl);
    $result = json_decode($json);

    if($result != NULL && $result != "" && $result->totalItems > 0) {
        if(isset($result->items[0]->volumeInfo)) {
            $firstResult = $result->items[0];
            $volumeInfo = $firstResult->volumeInfo;

            if(isset($volumeInfo) && $volumeInfo != NULL) {
                if(isset($volumeInfo->imageLinks)) {
                    $imageLinks = $volumeInfo->imageLinks;
                }

                if(isset($imageLinks->thumbnail)) {
                    $url = $imageLinks->thumbnail;
                } else if(isset($imageLinks->smallThumbnail)) {
                    $url = $imageLinks->smallThumbnail;
                }

                if(isset($url)) {
                    update_post_meta($insertElement, 'text_img', $url);
                    update_post_meta($insertElement, 'fifu_image_url', fifu_convert($url));
                    fifu_update_fake_attach_id($insertElement);
                } else {
                    update_post_meta($insertElement, 'text_img_error', 'erreur URL');
                }

                if(isset($volumeInfo->infoLink)) {
                    update_post_meta($insertElement, 'text_google_link', $volumeInfo->infoLink);
                }
                
            }
        }

    } else {
        update_post_meta($insertElement, 'text_img_error', 'erreur google ' . $googleUrl);
    }
}
add_action('submit_summary', 'submit_summary_callback');


function listTermsToText($listTerms) {
    $res = "";
    foreach ($listTerms as $term) {
        if($res != "") {
            $res .= ', ';
        }
        $res .= $term->name;
    }
    return $res;
}

